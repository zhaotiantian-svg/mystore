<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 通过mapper来配置映射信息. namespace是命名空间, 必须保证唯一 -->
<mapper namespace="b_crud.entity.User">

	<!-- 映射实体类与数据库表中的匹配关系. 比如: User类中的id属性, 就匹配user表中的id字段. type属性: 表示实体类的全名称[需要映射的实体类] 
		id属性: 是实体类与表映射关系的唯一标识. autoMapping: 是否自动映射. [默认为true] -->
	<resultMap type="user" id="user" autoMapping="true">

		<!-- id标签: 用来映射主键. result标签: 用来映射非主键 property属性: 映射实体类中的属性名称 column属性: 
			映射数据库表中的字段名称 constructor - 用于在实例化类时，注入结果到构造方法中 idArg - ID 参数；标记出作为 ID 的结果可以帮助提高整体性能 
			arg - 将被注入到构造方法的一个普通结果 association – 一个复杂类型的关联；许多结果将包装成这种类型 嵌套结果映射 – 关联本身可以是一个 
			resultMap 元素，或者从别处引用一个 collection – 一个复杂类型的集合 嵌套结果映射 – 集合本身可以是一个 resultMap 
			元素，或者从别处引用一个 discriminator – 使用结果值来决定使用哪个 resultMap case – 基于某些值的结果映射 嵌套结果映射 
			– case 本身可以是一个 resultMap 元素，因此可以具有相同的结构和元素，或者从别处引用一个 -->

		<id property="id" column="id" />
		<result property="username" column="username" />
		<result property="password" column="password" />
		<result property="salary" column="salary" />

	</resultMap>

<!-- 
		insert 标签, 用来书写插入语句.
		id属性: 要执行该sql语句的唯一标识
	 -->
<insert id="addUser1">
	insert into user(id,username,password,salary) values(6,"lh","lh123",22);
</insert>


<insert id="addUser2" parameterType="user">
	insert into user(id,username,password,salary) values(#{id},#{username},#{password},#{salary});
</insert>

<update id="updateUser" parameterType="user">
	update user set username=#{username},password=#{password},salary=#{salary} where id=#{id}
</update>

<delete id="deleteUser" parameterType="int">
	delete from user where id=#{id} 
</delete>

<select id="findUserById" parameterType="int" resultType="user">
	select id,username,password,salary from user where id=#{id}
</select>

<select id="findAllUser" resultType="user">
		select id, username, password, salary from user
	</select>

</mapper>







