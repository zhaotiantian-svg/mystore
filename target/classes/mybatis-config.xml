<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd"> 
  <!-- configuration是配置文件的根标签, 是做mybatis连接数据库的环境配置 -->  
  <configuration>
  		
  		<!-- 
  			properties标签,用来引入外部资源文件
  			resource 属性后面跟的是外部资源文件的全名称[路径+名称+后缀]
  		 -->
  		<properties resource="db.properties"></properties>
  		
  		<!-- 为实体类取别名
  			这个标签必须要放在前面
  		 -->
  		<typeAliases>
  			<typeAlias type="a.entity.User" alias="user"/>
  			<typeAlias type="b_crud.entity.User" alias="user"/>
  		</typeAliases>
  
  <!-- MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 
		现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者共享相同 Schema 的多个生产数据库， 
		想使用相同的 SQL 映射。许多类似的用例。

		不过要记住：尽管可以配置多个环境，每个 SqlSessionFactory 实例只能选择其一。
		
		这是在environments 标签中的default属性, 默认的环境 ID（比如:default="mysqlEnv"）。
		
		每个 environment  -->
		<!-- 配置环境 -->
  <environments default="mysqlEnv">


  	<environment id="mysqlEnv">
  	
  			<!-- 
				在 MyBatis 中有两种类型的事务管理器（也就是 type="[JDBC|MANAGED]"）：

				JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务范围。
				
				MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，
				而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。
				 默认情况下它会关闭连接，然而一些容器并不希望这样，
				因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。
				
				NOTE如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器， 
				因为 Spring 模块会使用自带的管理器来覆盖前面的配置。

				这两种事务管理器类型都不需要任何属性。它们不过是类型别名，
				换句话说，你可以使用 TransactionFactory 接口的实现类的完全限定名或类型别名代替它们。
			 -->
  		<transactionManager type="JDBC"></transactionManager>
  	
  		<!-- 
				dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。
	
				许多 MyBatis 的应用程序将会按示例中的例子来配置数据源。然而它并不是必须的。
				要知道为了方便使用延迟加载，数据源才是必须的。
				
				有三种内建的数据源类型（也就是 type="[UNPOOLED|POOLED|JNDI]"）：
	
				UNPOOLED– 这个数据源的实现只是每次被请求时打开和关闭连接。虽然一点慢，
				它对在及时可用连接方面没有性能要求的简单应用程序是一个很好的选择。 
				不同的数据库在这方面表现也是不一样的，所以对某些数据库来说使用连接池并不重要，这个配置也是理想的。
				UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：
	
				driver – 这是 JDBC 驱动的 Java 类的完全限定名（并不是JDBC驱动中可能包含的数据源类）。
				url – 这是数据库的 JDBC URL 地址。
				username – 登录数据库的用户名。
				password – 登录数据库的密码。
				defaultTransactionIsolationLevel – 默认的连接事务隔离级别。
				作为可选项，你也可以传递属性给数据库驱动。要这样做，属性的前缀为"driver."，例如：
				
				driver.encoding=UTF8
				这将通过DriverManager.getConnection(url,driverProperties)方法传递值为 UTF8 的 encoding 属性给数据库驱动。
	
				POOLED– 这种数据源的实现利用"池"的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 
				这是一种使得并发 Web 应用快速响应请求的流行处理方式。
	
				除了上述提到 UNPOOLED 下的属性外，会有更多属性用来配置 POOLED 的数据源：
	
				poolMaximumActiveConnections – 在任意时间可以存在的活动（也就是正在使用）连接数量，默认值：10
				poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。
				poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）
				poolTimeToWait – 这是一个底层设置，如果获取连接花费的相当长的时间，它会给连接池打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直安静的失败），默认值：20000 毫秒（即 20 秒）。
				poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否处在正常工作秩序中并准备接受请求。默认是"NO PING QUERY SET"，这会导致多数数据库驱动失败时带有一个恰当的错误消息。
				poolPingEnabled – 是否启用侦测查询。若开启，也必须使用一个可执行的 SQL 语句设置 poolPingQuery 属性（最好是一个非常快的 SQL），默认值：false。
				poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的使用频度。这可以被设置成匹配具体的数据库连接超时时间，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。
				
				JNDI– 这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。
				这种数据源配置只需要两个属性：
	
				initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。
				这是个可选属性，如果忽略，那么 data_source 属性将会直接从 InitialContext 中寻找。
				
				data_source – 这是引用数据源实例位置的上下文的路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，
				没有提供时则直接在 InitialContext 中查找。和其他数据源配置类似，可以通过添加前缀"env."直接把属性传递给初始上下文。比如：
	
				env.encoding=UTF8
				这就会在初始上下文（InitialContext）实例化时往它的构造方法传递值为 UTF8 的 encoding 属性。
	
				通过需要实现接口 org.apache.ibatis.datasource.DataSourceFactory ， 也可使用任何第三方数据源，：
			 -->
  	<dataSource type="POOLED">
  		<property name="driver" value="${driver}"/>
  		<property name="url" value="${url}"/>
  		<property name="username" value="${username}"/>
  		<property name="password" value="${password}"/>
  	</dataSource>
  	
  	
  	</environment>
  
  
  </environments>
  <!-- mappers标签中配置各种映射文件 -->
  <mappers>
  	<!-- 使用resource属性加载mapper的xml配置文件 -->
  	<!--  <mapper resource="a/entity/UserMapper.xml"/> -->
  	<mapper resource="b_crud/entity/UserMapper.xml"/>
  
  </mappers>
  
  
  
  
  
  
  
  
  
  
  
  
  </configuration>
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  